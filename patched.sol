// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract Status {
    // Mapping to store user statuses
    mapping(address => string) public statuses;

    // Max length for a status string (e.g., 280 characters)
    uint256 public constant MAX_STATUS_LENGTH = 280;

    // Event to log status updates
    event StatusUpdated(address indexed user, string newStatus);

    // Set the status for the sender, with access control and validation
    function setStatus(string memory newStatus) public {
        require(bytes(newStatus).length > 0, "Status cannot be empty");
        require(bytes(newStatus).length <= MAX_STATUS_LENGTH, "Status exceeds max length");

        // Update the status for the sender (msg.sender)
        statuses[msg.sender] = newStatus;

        // Emit an event for the status change
        emit StatusUpdated(msg.sender, newStatus);
    }

    // Retrieve the status of a given address
    function getStatus(address user) public view returns (string memory) {
        return statuses[user];\
    }
}


    function setStatus(string memory newStatus) public validStatus(newStatus) {
        statuses[msg.sender] = newStatus;
        emit StatusUpdate(msg.sender, newStatus);
    }

    function getStatus(address user) public view returns (string memory) {
        require(bytes(statuses[user]).length > 0, "No status set for this user");
        require(msg.sender == user, "Not authorized to view this status");
        return statuses[user];
    }
}
